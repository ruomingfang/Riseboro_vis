filenames <- list.files(path = "./Data02130308",pattern = "csv",full.names = TRUE)
extractData <- function(filepath){
sourceData = read.csv(filepath)
sensorName = tools::file_path_sans_ext(basename(filepath)) #works best if filename=sensorname
sensorData = sourceData %>% select(id,timestamp_local,sn,temp_manifold,rh_manifold,co2,voc,co,no,no2,o3,pm1,pm25,pm10) #modify here to change the attributes to extract
sensorData$sensorname = sensorName
return(sensorData)
}
# placeholder
filenames <- list.files(path = "./Data02130308",pattern = "csv",full.names = TRUE)
data = data.frame()
for (f in filenames){
name = tools::file_path_sans_ext(basename(f))
data = rbind(data,extractData(f))
}
# placeholder
filenames <- list.files(path = "./Data02130308",pattern = "csv",full.names = TRUE)
getwd
getwd()
getwd()
setwd("~/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis")  #for setting any working directory
extractData <- function(filepath){
sourceData = read.csv(filepath)
sensorName = tools::file_path_sans_ext(basename(filepath)) #works best if filename=sensorname
sensorData = sourceData %>% select(id,timestamp_local,sn,temp_manifold,rh_manifold,co2,voc,co,no,no2,o3,pm1,pm25,pm10) #modify here to change the attributes to extract
sensorData$sensorname = sensorName
return(sensorData)
}
# placeholder
filenames <- list.files(path = "./Data02130308",pattern = "csv",full.names = TRUE)
data = data.frame()
for (f in filenames){
name = tools::file_path_sans_ext(basename(f))
data = rbind(data,extractData(f))
}
print(str(data))
runApp()
runApp()
runApp('~/Desktop/Ballbreaker/RA/Riseboro/shiny/shiny_graph_app.R')
runApp('~/Desktop/Ballbreaker/RA/Riseboro/shiny/shiny_graph_app.R')
runApp('~/Desktop/Ballbreaker/RA/Riseboro/shiny/shiny_graph_app.R')
runApp('~/Desktop/Ballbreaker/RA/Riseboro/shiny/shiny_graph_app.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
startdate = as.POSIXct(input$daterange[1])
runApp()
runApp()
runApp()
runApp()
# Define lookup
lookup = c("PM1" = "pm1")
View(data)
# Define lookup
lookup <- list(PM1="pm1",PM2.5="pm25",PM10="pm10",CO2="co2",CO="co",NO2="no2",NO="no",O3="o3",Temperature = "temp_manifold","Relative Humidity" = "rh_manifold")
lookup[['PM1']]
lookup[['Relative Humidity']]
lookup[["Relative Humidity"]]
runApp()
runApp()
class(data$sensorname)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('~/Desktop/Ballbreaker/RA/Riseboro/shiny/shiny_graph_app.R')
runApp()
runApp('~/Desktop/Ballbreaker/RA/Riseboro/shiny/shiny_graph_app.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='rmfang',
token='3C71C08CB65B2647FB30EE825D89F4C7',
secret='cI9SHERgY+Jksu0M4fURnPFQgtoHcPmgIoAwQJN/')
library(rsconnect)
rsconnect::deployApp('/Users/ruomingfang/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis')
getSrcDirectory()
getSrcDirectory()[1]
runApp()
rsconnect::deployApp('/Users/ruomingfang/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis')
runApp()
runApp()
rsconnect::deployApp('/Users/ruomingfang/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis')
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp('/Users/ruomingfang/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# getdata
filenames <- list.files(path = "./Data02130308",pattern = "csv",full.names = TRUE)
data = data.frame()
for (f in filenames){
name = tools::file_path_sans_ext(basename(f))
data = rbind(data,extractData(f))
}
setwd("~/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis")  #for setting any working directory
extractData <- function(filepath){
sourceData = read.csv(filepath)
sensorName = tools::file_path_sans_ext(basename(filepath)) #works best if filename=sensorname
sensorData = sourceData %>% select(id,timestamp_local,sn,temp_manifold,rh_manifold,co2,voc,co,no,no2,o3,pm1,pm25,pm10) #modify here to change the attributes to extract
sensorData$sensorname = sensorName
return(sensorData)
}
# Define lookup
lookupattr <- list(PM1="pm1",PM2.5="pm25",PM10="pm10",CO2="co2",CO="co",NO2="no2",NO="no",O3="o3",Temperature = "temp_manifold","Relative Humidity" = "rh_manifold")
lookupsensor <- list("1D"="1D","2D"="2D","3D"="3D","4D"="4D","Boiler Room" = "Boiler","Rooftop"="Rooftop")
# getdata
filenames <- list.files(path = "./Data02130308",pattern = "csv",full.names = TRUE)
data = data.frame()
for (f in filenames){
name = tools::file_path_sans_ext(basename(f))
data = rbind(data,extractData(f))
}
#Process time
data$timestamp_local = as.POSIXct(data$timestamp_local,format = '%Y-%m-%dT%H:%M:%SZ')
data = data %>%
mutate(st_week = floor_date(timestamp_local,"week")) %>%
mutate(st_hour = floor_date(timestamp_local,"hour")) %>%
mutate(st_time_inweek = st_hour - st_week) %>%
mutate(st_time_all_in_oneweek = st_week[1] + st_time_inweek) # put every obs in one week
test1 = data %>% select("pm1")
View(test1)
min(test1)
max(test1)
range(test1)
runApp()
runApp()
runApp()
test1 = data %>% select("co2")
View(test1)
range(test1)
range(test1,na.rm = TRUE)
runApp()
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
d <- data
d$y2 <- c(d$pm1[-1],NA)
View(d)
set.seed(123)
stackOne=data.frame(id=rep(c(1,2,3),each=3),
y=rnorm(9,2,1),
x=rep(c(1,2,3),3))
View(stackOne)
d <- y
d <- stackOne
d$y2 <- c(d$y[-1],NA)
d$x2 <- c(d$x[-1], NA)
d <- d[-findInterval(unique(d$id), d$id), ]
View(d)
View(stackOne)
plot(stackOne[,3:2],pch=20)
clip(min(stackOne$x), max(stackOne$x), threshold, max(stackOne$y))
clip(min(stackOne$x), max(stackOne$x), 2.2, max(stackOne$y))
View(d)
segments(d$x, d$y, d$x2, d$y2, lwd=2)
clip(min(stackOne$x), max(stackOne$x), min(stackOne$y), threshold)
clip(min(stackOne$x), max(stackOne$x), min(stackOne$y), 2.2)
segments(d$x, d$y, d$x2, d$y2, lwd=2, col='red')
runApp()
View(d)
View(stackOne)
View(data)
View(d)
temp <- data %>% select(timestamp_local,attribute)
temp <- data %>% select(c("timestamp_local",attribute))
temp <- data %>% select(timestamp_local,pm1)
View(temp)
temp <- data %>% select(timestamp_local,pm1)
colnames(temp) <- c("x","y")
d <- data %>% select(timestamp_local,pm1)
colnames(d) <- c("x","y")
d$y2 <- c(d[-1,2], NA)
d$x2 <- c(d[-1,1], NA)
# new cols for point coordinates of line end
d$y2 <- c(d$y[-1], NA)
d$x2 <- c(d$x[-1], NA)
d <- d[-findInterval(unique(d$id), d$id), ] # remove last row for each group
# new high-resolution y coordinates between each pair within each group
y.new <- apply(d, 1, function(x) {
seq(x['y'], x['y2'], yres*sign(x['y2'] - x['y']))
})
d$len <- sapply(y.new, length) # length of each series of points
# new high-resolution x coordinates corresponding with new y-coords
x.new <- apply(d, 1, function(x) {
seq(x['x'], x['x2'], length.out=x['len'])
})
temp <- data %>% select(timestamp_local,pm1)
temp2 <- data.frame(x1 = head(temp$timestamp_local, -1), x2 = tail(temp$timestamp_local, -1) , y1 = head(temp$pm1, -1), y2 = tail(temp$pm1, -1))
View(temp2)
temp2 <- temp[order(as.Date(temp$timestamp_local, format="%Y-%m-%d %H:%M:%S")),]
View(temp2)
View(temp)
temp2 <- temp[order(as.Date(temp$timestamp_local, format="%Y-%m-%d %H:%M:%S")),]
View(temp2)
View(temp2)
temp2 <- temp[order(temp$timestamp_local),]
View(temp2)
temp3 <- data.frame(x1 = head(temp2$timestamp_local, -1), x2 = tail(temp$timestamp_local, -1) , y1 = head(temp$pm1, -1), y2 = tail(temp$pm1, -1))
temp3 <- data.frame(x1 = head(temp2$timestamp_local, -1), x2 = tail(temp$timestamp_local, -1) , y1 = head(temp2$pm1, -1), y2 = tail(temp2$pm1, -1))
View(temp3)
temp3 <- data.frame(x1 = head(temp2$timestamp_local, -1), x2 = tail(temp2$timestamp_local, -1) , y1 = head(temp2$pm1, -1), y2 = tail(temp2$pm1, -1))
View(temp3)
temp3$col <- cut(DF$y1, c(-Inf, 3, Inf))
temp3$col <- cut(temp3$y1, c(-Inf, 3, Inf))
ggplot(data=temp3, aes(x=x1, y=y1, xend = x2, yend = y2, colour=col)) +
geom_segment(size = 2)
ggplot(data=temp3, aes(x=x1, y=y1, xend = x2, yend = y2, colour=col)) +
geom_segment()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# temp2 <- temp[order(temp$timestamp_local),]
#
# temp3 <- data.frame(x1 = head(temp2$timestamp_local, -1), x2 = tail(temp2$timestamp_local, -1) , y1 = head(temp2$pm1, -1), y2 = tail(temp2$pm1, -1))
# temp3$col <- cut(temp3$y1, c(-Inf, 3, Inf))
#
#
# ggplot(data=temp3, aes(x=x1, y=y1, xend = x2, yend = y2, colour=col)) +
#   geom_segment()
#
# data <- data[order(data$timestamp_local),]
temp <- data %>% select(timestamp_local,"pm1")
View(temp)
runApp()
runApp()
runApp()
rsconnect::deployApp("/Users/ruomingfang/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
range(data$timestamp_local,na.rm = TRUE)
extractData <- function(filepath){
sourceData = read.csv(filepath)
sensorName = tools::file_path_sans_ext(basename(filepath)) #works best if filename=sensorname
sensorData = sourceData %>% select(id,timestamp_local,sn,temp_manifold,rh_manifold,co2,voc,co,no,no2,o3,pm1,pm25,pm10) #modify here to change the attributes to extract
sensorData$sensorname = sensorName
return(sensorData)
}
# Define lookup
lookupattr <- list(PM1="pm1",PM2.5="pm25",PM10="pm10",CO2="co2",CO="co",NO2="no2",NO="no",O3="o3",Temperature = "temp_manifold","Relative Humidity" = "rh_manifold")
lookupsensor <- list("1D"="1D","2D"="2D","3D"="3D","4D"="4D","Boiler Room" = "Boiler","Rooftop"="Rooftop")
# getdata
filenames <- list.files(path = "./Data02130308",pattern = "csv",full.names = TRUE)
data = data.frame()
for (f in filenames){
name = tools::file_path_sans_ext(basename(f))
data = rbind(data,extractData(f))
}
#Process time
data$timestamp_local = as.POSIXct(data$timestamp_local,format = '%Y-%m-%dT%H:%M:%SZ', tz = "EST")
View(data)
range(data$timestamp_local,na.rm = TRUE)
View(data)
as.POSIXct(Sys.time(),tz="EST")
as.POSIXct(Sys.time(),"EST")
as.Date(range(data$timestamp_local,na.rm = TRUE)[1])
as.Date(range(data$timestamp_local,na.rm = TRUE)[1],'EST')
#get data time range
datadaterange = range(data$timestamp_local,na.rm = TRUE)
datadatemin = as.Date(datadaterange[1],'EST')
datadatemax = as.Date(datadaterange[2],'EST')
datadaterange[1]
runApp()
runApp('~/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis backup')
class(datadatemax)
runApp('~/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis backup')
runApp()
runApp()
runApp('~/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis backup')
runApp('~/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis backup')
runApp()
runApp()
runApp()
runApp()
runApp()
x <- rnorm
x <- rnorm(100)
quantile(x,probs = 0.75)
quant75 = quantile(x,probs = 0.75)
class(quant75)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp("/Users/ruomingfang/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis")
shiny::runApp()
install.packages("tidyverse")
install.packages("lubridate")
install.packages("Hmisc")
runApp()
# setwd("~/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis")  #for setting any working directory
varnames <- c("PM1","PM2.5","PM10","CO2","CO","NO2","NO","O3","Temperature","Relative Humidity")
varnames-"PM1"
varnames[-"PM1"]
varnames[varnames!="PM1"]
c(n"No comparison",varnames[varnames!="PM1"])
c("No comparison",varnames[varnames!="PM1"])
runApp()
x = "No Comparison"
x == "No Comparison"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
# targetVariable = data[attributeSelected]
data_diurnal =
data %>%
# drop_na(attributeSelected) %>%
mutate(targetVariable = pm1) %>%
filter(timestamp_local>=startdateT5,timestamp_local<=enddateT5) %>%
filter(sensorname == sensorSelected) %>%
select(st_time_all_in_oneday,targetVariable)
data_test = data %>% mutate(targetVariable = pm1) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test)
attr_test = "pm1"
data_test = data %>% mutate(targetVariable = !!attr_test) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test)
data_test = data %>% mutate(targetVariable := !!attr_test) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test)
data_test = data %>% mutate(targetVariable := attr_test) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test)
data_test = data %>% mutate(targetVariable = attr_test) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test)
my_function <- function(df,var){}
my_function <- function(df,var){df %>% mutate(targetVariable = !!var) %>% select(st_time_all_in_oneday,targetVariable)}
data_test = my_function(data,quo(attr_test))
View(data_test)
data_test = my_function(data,attr_test)
View(data_test)
my_function <- function(df,var){df %>% mutate(targetVariable = !! var) %>% select(st_time_all_in_oneday,targetVariable)}
testvar = quo(attr_test)
class(testvar)
testvar2 = !!testvar
> data_test = data %>% mutate(targetVariable = !!parse_quo(attr_test,env=caller_env())) %>% select(st_time_all_in_oneday,targetVariable)
data_test = data %>% mutate(targetVariable = !!parse_quo(attr_test,env=caller_env())) %>% select(st_time_all_in_oneday,targetVariable)
library(rlang)
data_test = data %>% mutate(targetVariable = !!parse_quo(attr_test,env=caller_env())) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test)
data_test2 = data %>% mutate(targetVariable = !!parse_quo(attr_test,env=caller_env())) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test2)
data_test2 = data %>% mutate(targetVariable = pm1) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test)
data_test2 = data %>% mutate(targetVariable = attr_test) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test)
View(data_test2)
data_test = data %>% mutate(targetVariable = pm1) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test)
View(data_test2)
data_test2 = data %>% mutate(targetVariable = !!parse_quo(attr_test,env=caller_env())) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test2)
data_test2 = data %>% mutate(targetVariable = !!quote(attr_test)) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test2)
testvar = parse_quo(attr_test,env=caller_env())
testvar = quo(!!attr_test)
data_test2 = data %>% mutate(targetVariable = !! testvar) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test2)
data_test2 = data %>% mutate(targetVariable := !! testvar) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test2)
data_test2 = data %>% mutate(targetVariable := !! testvar) %>% select(st_time_all_in_oneday,targetVariable)
lhs = "targetVariable"
data_test2 = data %>% mutate(lhs := !! testvar) %>% select(st_time_all_in_oneday,targetVariable)
data_test2 = data %>% mutate(!!lhs := !! testvar) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test2)
test_command = "targetVariable = pm1"
data_test2 = data %>% mutate_(test_command) %>% select(st_time_all_in_oneday,targetVariable)
runApp()
runApp()
data_test2 = data %>% drop_na(pm1)
data_test2 = data %>% drop_na(pm10)
data_test2 = data %>% drop_na(pm25)
data_test2 = data %>% drop_na(co2)
data_test2 = data %>% drop_na(co)
runApp()
attr_test = lookupattr[[PM1]]
attr_test = lookupattr[["PM1"]]
class(attr_test)
attr_test_denom = "pm25"
attr_test = parse_quo(attr_test,env = caller_env())
attr_test_denom = parse_quo(attr_test_denom,env = caller_env())
data_test = data %>% mutate(targetVariable = ifelse(!!attr_test_denom==0,NA,!!attr_test/!!attr_test_denom))
View(data_test)
data_test = data_test %>% select(st_time_all_in_oneday,!!attr_test,!!attr_test_denom,targetVariable)
View(data_test)
data_test2 = data %>% drop_na(attr_test)
data_test2 = data %>% drop_na(!!attr_test)
!!attr_test
data_test2 = data %>% drop_na(!!attr_test)
data_test2 = data %>% drop_na(!!attr_test_denom)
View(data_test2)
data_test2 = data
data_test2 = data %>% drop_na(!!attr_test)
View(data)
data_test2 = data
data_test2 = data %>% drop_na(!!attr_test,!!attr_test_denom)
data_test = data %>% drop_na(!!attr_test,!!attr_test_denom) %>% mutate(targetVariable = ifelse(!!attr_test_denom==0,NA,!!attr_test/!!attr_test_denom)) %>% select(st_time_all_in_oneday,targetVariable)
View(data_test)
data_test = data %>% drop_na(!!attr_test,!!attr_test_denom) %>% mutate(targetVariable = ifelse(!!attr_test_denom==0,NA,!!attr_test/!!attr_test_denom)) %>% select(st_time_all_in_oneday,!!attr_test,!!attr_test_denom,targetVariable)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("rsconnect")
rsconnect::deployApp("/Users/ruomingfang/Desktop/Ballbreaker/RA/Riseboro/Riseboro_vis")
